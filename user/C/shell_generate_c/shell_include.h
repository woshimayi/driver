#ifndef __SHELL_INCLUDE__
#define __SHELL_INCLUDE__
void generate_file()
{
creat("/tmp/shell_include.sh", 0777);
FILE *fp = fopen("/tmp/shell_include.sh", "w");
if (!fp) {
	perror("fopen");
	exit(EXIT_FAILURE);
}
fprintf(fp, "#!/bin/bash");
fprintf(fp, "\n");
fprintf(fp, "###");
fprintf(fp, "\n");
fprintf(fp, " # @*************************************: ");
fprintf(fp, "\n");
fprintf(fp, " # @FilePath     : /user/C/shell_generate_c/cppcheck_self.sh");
fprintf(fp, "\n");
fprintf(fp, " # @version      : ");
fprintf(fp, "\n");
fprintf(fp, " # @Author       : dof");
fprintf(fp, "\n");
fprintf(fp, " # @Date         : 2024-08-22 16:25:22");
fprintf(fp, "\n");
fprintf(fp, " # @LastEditors  : dof");
fprintf(fp, "\n");
fprintf(fp, " # @LastEditTime : 2024-08-22 19:00:17");
fprintf(fp, "\n");
fprintf(fp, " # @Descripttion :  ");
fprintf(fp, "\n");
fprintf(fp, " # @compile      :  ");
fprintf(fp, "\n");
fprintf(fp, " # @**************************************: ");
fprintf(fp, "\n");
fprintf(fp, "### ");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "\t\n");
fprintf(fp, "path=$1");
fprintf(fp, "\n");
fprintf(fp, "execpath=/usr/bin/cppcheck-htmlreport                 # 使用cppcheck-htmlreport 脚本进行扫描");
fprintf(fp, "\n");
fprintf(fp, "reprot=report-src.xml                                 # 中间文件");
fprintf(fp, "\n");
fprintf(fp, "outputdir=cppcheck_dir                                # 生成html结果文件夹");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "# --enable             生成所有的提示");
fprintf(fp, "\n");
fprintf(fp, "# --suppress           忽略包含警告");
fprintf(fp, "\n");
fprintf(fp, "# --xml --xml-version  使用xml 格式文件");
fprintf(fp, "\n");
fprintf(fp, "# $path                扫描文件");
fprintf(fp, "\n");
fprintf(fp, "# report-src.xml       导出结果到report-src.xml");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "cppcheck --enable=all --check-config --suppress=missingIncludeSystem   --xml --xml-version=2 $path  2>$reprot");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "\t\n");
fprintf(fp, "# inlcude=$(find $path -name *.h | xargs dirname | awk '{print \"-I \" $1}')");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "\t\n");
fprintf(fp, "rm -rf $outputdir");
fprintf(fp, "\n");
fprintf(fp, "if [ ! -d \"$outputdir\" ]");
fprintf(fp, "\n");
fprintf(fp, "then");
fprintf(fp, "\n");
fprintf(fp, "	mkdir $outputdir");
fprintf(fp, "\n");
fprintf(fp, "fi");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "\t\n");
fprintf(fp, "# inlcude=-include=user/C/http-master \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/curl/__MACOSX/cJSON \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/curl/cJSON \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/log/log \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/string \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/cmake_test/src \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/fileIO/__MACOSX/cJSON \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/fileIO/cJSON \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/ipc_shm \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/123_call \\");
fprintf(fp, "\n");
fprintf(fp, "		# -include=user/C/FileIO/read-ini ");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "echo \"inlcude $inlcude\"");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "# --source-dir  源码目录");
fprintf(fp, "\n");
fprintf(fp, "# --title       标题目录");
fprintf(fp, "\n");
fprintf(fp, "# --file        扫描生成结果目录");
fprintf(fp, "\n");
fprintf(fp, "# --report-dir  生成html 目录");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "$execpath --source-dir=./ $inlcude --title=cppcheck_$path --file=$reprot --report-dir=$outputdir");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "rm $reprot");
fprintf(fp, "\n");
fprintf(fp, "\t\n");
fprintf(fp, "\t\n");
fclose(fp);
}
#endif
